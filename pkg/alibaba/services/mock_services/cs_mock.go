// Code generated by MockGen. DO NOT EDIT.
// Source: ../cs.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "github.com/rancher/muchang/cs/client"
)

// MockClustersClientInterface is a mock of ClustersClientInterface interface.
type MockClustersClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClustersClientInterfaceMockRecorder
}

// MockClustersClientInterfaceMockRecorder is the mock recorder for MockClustersClientInterface.
type MockClustersClientInterfaceMockRecorder struct {
	mock *MockClustersClientInterface
}

// NewMockClustersClientInterface creates a new mock instance.
func NewMockClustersClientInterface(ctrl *gomock.Controller) *MockClustersClientInterface {
	mock := &MockClustersClientInterface{ctrl: ctrl}
	mock.recorder = &MockClustersClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClustersClientInterface) EXPECT() *MockClustersClientInterfaceMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockClustersClientInterface) CreateCluster(ctx context.Context, request *client.CreateClusterRequest) (*client.CreateClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", ctx, request)
	ret0, _ := ret[0].(*client.CreateClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockClustersClientInterfaceMockRecorder) CreateCluster(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockClustersClientInterface)(nil).CreateCluster), ctx, request)
}

// CreateClusterNodePool mocks base method.
func (m *MockClustersClientInterface) CreateClusterNodePool(ctx context.Context, clusterID *string, request *client.CreateClusterNodePoolRequest) (*client.CreateClusterNodePoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterNodePool", ctx, clusterID, request)
	ret0, _ := ret[0].(*client.CreateClusterNodePoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterNodePool indicates an expected call of CreateClusterNodePool.
func (mr *MockClustersClientInterfaceMockRecorder) CreateClusterNodePool(ctx, clusterID, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterNodePool", reflect.TypeOf((*MockClustersClientInterface)(nil).CreateClusterNodePool), ctx, clusterID, request)
}

// DeleteCluster mocks base method.
func (m *MockClustersClientInterface) DeleteCluster(ctx context.Context, clusterID *string, request *client.DeleteClusterRequest) (*client.DeleteClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", ctx, clusterID, request)
	ret0, _ := ret[0].(*client.DeleteClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockClustersClientInterfaceMockRecorder) DeleteCluster(ctx, clusterID, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockClustersClientInterface)(nil).DeleteCluster), ctx, clusterID, request)
}

// DeleteClusterNodePool mocks base method.
func (m *MockClustersClientInterface) DeleteClusterNodePool(ctx context.Context, clusterID, nodePoolID *string, request *client.DeleteClusterNodepoolRequest) (*client.DeleteClusterNodepoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterNodePool", ctx, clusterID, nodePoolID, request)
	ret0, _ := ret[0].(*client.DeleteClusterNodepoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClusterNodePool indicates an expected call of DeleteClusterNodePool.
func (mr *MockClustersClientInterfaceMockRecorder) DeleteClusterNodePool(ctx, clusterID, nodePoolID, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterNodePool", reflect.TypeOf((*MockClustersClientInterface)(nil).DeleteClusterNodePool), ctx, clusterID, nodePoolID, request)
}

// DescribeClusterDetail mocks base method.
func (m *MockClustersClientInterface) DescribeClusterDetail(ctx context.Context, clusterID *string) (*client.DescribeClusterDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeClusterDetail", ctx, clusterID)
	ret0, _ := ret[0].(*client.DescribeClusterDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusterDetail indicates an expected call of DescribeClusterDetail.
func (mr *MockClustersClientInterfaceMockRecorder) DescribeClusterDetail(ctx, clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterDetail", reflect.TypeOf((*MockClustersClientInterface)(nil).DescribeClusterDetail), ctx, clusterID)
}

// DescribeClusterNodePools mocks base method.
func (m *MockClustersClientInterface) DescribeClusterNodePools(ctx context.Context, clusterID *string, request *client.DescribeClusterNodePoolsRequest) (*client.DescribeClusterNodePoolsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeClusterNodePools", ctx, clusterID, request)
	ret0, _ := ret[0].(*client.DescribeClusterNodePoolsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusterNodePools indicates an expected call of DescribeClusterNodePools.
func (mr *MockClustersClientInterfaceMockRecorder) DescribeClusterNodePools(ctx, clusterID, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterNodePools", reflect.TypeOf((*MockClustersClientInterface)(nil).DescribeClusterNodePools), ctx, clusterID, request)
}

// DescribeClusterNodes mocks base method.
func (m *MockClustersClientInterface) DescribeClusterNodes(ctx context.Context, clusterID *string, request *client.DescribeClusterNodesRequest) (*client.DescribeClusterNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeClusterNodes", ctx, clusterID, request)
	ret0, _ := ret[0].(*client.DescribeClusterNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusterNodes indicates an expected call of DescribeClusterNodes.
func (mr *MockClustersClientInterfaceMockRecorder) DescribeClusterNodes(ctx, clusterID, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterNodes", reflect.TypeOf((*MockClustersClientInterface)(nil).DescribeClusterNodes), ctx, clusterID, request)
}

// DescribeClusterUserKubeconfig mocks base method.
func (m *MockClustersClientInterface) DescribeClusterUserKubeconfig(ctx context.Context, clusterID *string, request *client.DescribeClusterUserKubeconfigRequest) (*client.DescribeClusterUserKubeconfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeClusterUserKubeconfig", ctx, clusterID, request)
	ret0, _ := ret[0].(*client.DescribeClusterUserKubeconfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusterUserKubeconfig indicates an expected call of DescribeClusterUserKubeconfig.
func (mr *MockClustersClientInterfaceMockRecorder) DescribeClusterUserKubeconfig(ctx, clusterID, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterUserKubeconfig", reflect.TypeOf((*MockClustersClientInterface)(nil).DescribeClusterUserKubeconfig), ctx, clusterID, request)
}

// DescribeTaskInfo mocks base method.
func (m *MockClustersClientInterface) DescribeTaskInfo(ctx context.Context, taskID *string) (*client.DescribeTaskInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTaskInfo", ctx, taskID)
	ret0, _ := ret[0].(*client.DescribeTaskInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTaskInfo indicates an expected call of DescribeTaskInfo.
func (mr *MockClustersClientInterfaceMockRecorder) DescribeTaskInfo(ctx, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTaskInfo", reflect.TypeOf((*MockClustersClientInterface)(nil).DescribeTaskInfo), ctx, taskID)
}

// ModifyClusterNodePool mocks base method.
func (m *MockClustersClientInterface) ModifyClusterNodePool(ctx context.Context, clusterID, nodePoolID *string, request *client.ModifyClusterNodePoolRequest) (*client.ModifyClusterNodePoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyClusterNodePool", ctx, clusterID, nodePoolID, request)
	ret0, _ := ret[0].(*client.ModifyClusterNodePoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyClusterNodePool indicates an expected call of ModifyClusterNodePool.
func (mr *MockClustersClientInterfaceMockRecorder) ModifyClusterNodePool(ctx, clusterID, nodePoolID, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyClusterNodePool", reflect.TypeOf((*MockClustersClientInterface)(nil).ModifyClusterNodePool), ctx, clusterID, nodePoolID, request)
}

// RemoveNodePoolNodes mocks base method.
func (m *MockClustersClientInterface) RemoveNodePoolNodes(ctx context.Context, clusterID, nodePoolID *string, request *client.RemoveNodePoolNodesRequest) (*client.RemoveNodePoolNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNodePoolNodes", ctx, clusterID, nodePoolID, request)
	ret0, _ := ret[0].(*client.RemoveNodePoolNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveNodePoolNodes indicates an expected call of RemoveNodePoolNodes.
func (mr *MockClustersClientInterfaceMockRecorder) RemoveNodePoolNodes(ctx, clusterID, nodePoolID, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNodePoolNodes", reflect.TypeOf((*MockClustersClientInterface)(nil).RemoveNodePoolNodes), ctx, clusterID, nodePoolID, request)
}

// UpgradeCluster mocks base method.
func (m *MockClustersClientInterface) UpgradeCluster(ctx context.Context, clusterID *string, request *client.UpgradeClusterRequest) (*client.UpgradeClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeCluster", ctx, clusterID, request)
	ret0, _ := ret[0].(*client.UpgradeClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeCluster indicates an expected call of UpgradeCluster.
func (mr *MockClustersClientInterfaceMockRecorder) UpgradeCluster(ctx, clusterID, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeCluster", reflect.TypeOf((*MockClustersClientInterface)(nil).UpgradeCluster), ctx, clusterID, request)
}
