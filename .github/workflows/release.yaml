name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  publish-images:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    - name: Read secrets
      uses: rancher-eio/read-vault-secrets@main
      with:
        secrets: |
          secret/data/github/repo/${{ github.repository }}/rancher-prime-stg-registry/credentials registry |  STAGE_REGISTRY_REGISTRY;
          secret/data/github/repo/${{ github.repository }}/rancher-prime-stg-registry/credentials username |  STAGE_REGISTRY_USERNAME;
          secret/data/github/repo/${{ github.repository }}/rancher-prime-stg-registry/credentials password |  STAGE_REGISTRY_PASSWORD;
    - name: Setup Environment Variables
      run: |
        echo "IMAGE=${{ env.STAGE_REGISTRY_REGISTRY }}/rancher/ali-operator" >> $GITHUB_ENV
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE }}
        flavor: |
          latest=false
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Staging Registry
      uses: docker/login-action@v3
      with:
        username: ${{ env.STAGE_REGISTRY_USERNAME }}
        password: ${{ env.STAGE_REGISTRY_PASSWORD }}
        registry: ${{ env.STAGE_REGISTRY_REGISTRY }}
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        file: package/Dockerfile
        push: true
        platforms: linux/${{ matrix.arch }}
        tags: ${{ env.IMAGE }}:${{ github.ref_name }}-linux-${{ matrix.arch }}
        build-args: ARCH=${{ matrix.arch }}
        labels: "${{ steps.meta.outputs.labels }}"
    - name: Export digest
      run: |
        mkdir -p /tmp/digests
        digest="${{ steps.build.outputs.digest }}"
        touch "/tmp/digests/${digest#sha256:}"
    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: "digests-linux-${{ matrix.arch }}"
        path: /tmp/digests/*
        if-no-files-found: error
        retention-days: 1
        overwrite: true

  merge:
    runs-on: ubuntu-latest
    needs: publish-images
    permissions:
      contents: read
      id-token: write 
    timeout-minutes: 10
    steps:
      - name: Download digests
        uses: actions/download-artifact@v5
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Load Secrets from Vault
        uses: rancher-eio/read-vault-secrets@main
        with:
          secrets: |
            secret/data/github/repo/${{ github.repository }}/rancher-prime-stg-registry/credentials registry |  STAGE_REGISTRY_REGISTRY;
            secret/data/github/repo/${{ github.repository }}/rancher-prime-stg-registry/credentials username |  STAGE_REGISTRY_USERNAME;
            secret/data/github/repo/${{ github.repository }}/rancher-prime-stg-registry/credentials password |  STAGE_REGISTRY_PASSWORD;
      - name: Setup Environment Variables
        run: |
          echo "IMAGE=${{ env.STAGE_REGISTRY_REGISTRY }}/rancher/ali-operator" >> $GITHUB_ENV
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE }}
          flavor: |
            latest=false
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.STAGE_REGISTRY_USERNAME }}
          password: ${{ env.STAGE_REGISTRY_PASSWORD }}
          registry: ${{ env.STAGE_REGISTRY_REGISTRY }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.IMAGE }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.IMAGE }}:${{ steps.meta.outputs.version }}

  release:
    permissions:
      contents: write # required for creating GH release
    runs-on: ubuntu-latest
    needs: merge
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        ref: ${{ github.ref_name}}
    - name: Create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # required for creating GH release
        GORELEASER_CURRENT_TAG: ${{ github.ref_name }} # specify the tag to be released
      id: goreleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: "~> v2"
        args: release --clean --verbose
    - name: Upload charts to release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # required for updating GH release
        REPO: rancher # First name component for Docker repository to reference in `values.yaml` of the Helm chart release, this is expected to be `rancher`, image name is appended to this value
        TAG: ${{ github.ref_name }} # image tag to be referenced in `values.yaml` of the Helm chart release
      run: |
        version=$(echo '${{ steps.goreleaser.outputs.metadata }}' | jq -r '.version')
        if [ -z "$version" ] || [ "$version" = "null" ]; then
            echo "::error::Failed to extract version from goreleaser metadata"
            exit 1
        fi

        echo "Publishing helm charts (version: $version)"

        # Check if files exist before processing
        if [ ! -d "bin/" ] || [ -z "$(find bin/ -name '*.tgz')" ]; then
          echo "No chart files found in bin/ directory"
          exit 1
        fi

        # Both version and appVersion are set to the same value in the Chart.yaml (excluding the 'v' prefix)
        CHART_VERSION=$version GIT_TAG=$version make charts

        for f in $(find bin/ -name '*.tgz'); do
          echo "Uploading $f to GitHub release $TAG"
          gh release upload $TAG $f
        done
        echo "Charts successfully uploaded to GitHub release $TAG"
    - name: Add charts to branch
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        # The dynamic version/branch detection is commented out for now because
        # we haven't cut an official release yet. Instead, we are hardcoding
        # `charts/v0.1` to publish an initial chart and test the workflow.
        # Once the first real release is made, we can switch back to using
        # version-based branches (see commented code below).
        #
        # version=$(echo '${{ steps.goreleaser.outputs.metadata }}' | jq -r '.version')
        # branch_version=v$(echo "$version" | cut -d'.' -f1,2)
        # charts_branch=charts/$branch_version
        charts_branch=charts/v0.1
        if [ ! -e ~/.gitconfig ]; then
          git config --global user.name "ali-operator-bot"
          git config --global user.email ali-operator@suse.de
        fi
        echo "Publishing helm chart in the branch $charts_branch"
        if ! git ls-remote --exit-code --heads origin "$charts_branch"; then
          git checkout --orphan "$charts_branch"
          git rm -rf .
          echo "# Ali Operator Helm Charts for $branch_version versions" > README.md
          echo "The documentation is centralized in a unique place, checkout https://github.com/rancher/ali-operator." >> README.md
          git checkout origin/main -- License .gitignore
          git add README.md License .gitignore
          git commit -m "Initial commit for $charts_branch"
        else
          git checkout .
          git checkout "$charts_branch"
        fi
        mkdir -p charts
        for f in $(find bin/ -name '*.tgz'); do
          tar -xf $f -C charts/
        done
        git add charts/**/*
        git commit -m "Update charts to version $version"
        git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
        git push origin "$charts_branch"